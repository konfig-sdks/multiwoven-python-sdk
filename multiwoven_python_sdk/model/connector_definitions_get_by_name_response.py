# coding: utf-8

"""
    MultiWoven API

    Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from multiwoven_python_sdk import schemas  # noqa: F401


class ConnectorDefinitionsGetByNameResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['ConnectorDefinitionsGetByNameResponseTags']:
                return ConnectorDefinitionsGetByNameResponseTags
            name = schemas.StrSchema
            connector_type = schemas.StrSchema
            connector_subtype = schemas.StrSchema
            documentation_url = schemas.StrSchema
            github_issue_label = schemas.StrSchema
            icon = schemas.StrSchema
            license = schemas.StrSchema
            release_stage = schemas.StrSchema
            support_level = schemas.StrSchema
        
            @staticmethod
            def connector_spec() -> typing.Type['ConnectorDefinitionsGetByNameResponseConnectorSpec']:
                return ConnectorDefinitionsGetByNameResponseConnectorSpec
            __annotations__ = {
                "tags": tags,
                "name": name,
                "connector_type": connector_type,
                "connector_subtype": connector_subtype,
                "documentation_url": documentation_url,
                "github_issue_label": github_issue_label,
                "icon": icon,
                "license": license,
                "release_stage": release_stage,
                "support_level": support_level,
                "connector_spec": connector_spec,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ConnectorDefinitionsGetByNameResponseTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connector_type"]) -> MetaOapg.properties.connector_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connector_subtype"]) -> MetaOapg.properties.connector_subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentation_url"]) -> MetaOapg.properties.documentation_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["github_issue_label"]) -> MetaOapg.properties.github_issue_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_stage"]) -> MetaOapg.properties.release_stage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["support_level"]) -> MetaOapg.properties.support_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connector_spec"]) -> 'ConnectorDefinitionsGetByNameResponseConnectorSpec': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags"], typing_extensions.Literal["name"], typing_extensions.Literal["connector_type"], typing_extensions.Literal["connector_subtype"], typing_extensions.Literal["documentation_url"], typing_extensions.Literal["github_issue_label"], typing_extensions.Literal["icon"], typing_extensions.Literal["license"], typing_extensions.Literal["release_stage"], typing_extensions.Literal["support_level"], typing_extensions.Literal["connector_spec"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['ConnectorDefinitionsGetByNameResponseTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connector_type"]) -> typing.Union[MetaOapg.properties.connector_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connector_subtype"]) -> typing.Union[MetaOapg.properties.connector_subtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentation_url"]) -> typing.Union[MetaOapg.properties.documentation_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["github_issue_label"]) -> typing.Union[MetaOapg.properties.github_issue_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_stage"]) -> typing.Union[MetaOapg.properties.release_stage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["support_level"]) -> typing.Union[MetaOapg.properties.support_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connector_spec"]) -> typing.Union['ConnectorDefinitionsGetByNameResponseConnectorSpec', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags"], typing_extensions.Literal["name"], typing_extensions.Literal["connector_type"], typing_extensions.Literal["connector_subtype"], typing_extensions.Literal["documentation_url"], typing_extensions.Literal["github_issue_label"], typing_extensions.Literal["icon"], typing_extensions.Literal["license"], typing_extensions.Literal["release_stage"], typing_extensions.Literal["support_level"], typing_extensions.Literal["connector_spec"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['ConnectorDefinitionsGetByNameResponseTags', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        connector_type: typing.Union[MetaOapg.properties.connector_type, str, schemas.Unset] = schemas.unset,
        connector_subtype: typing.Union[MetaOapg.properties.connector_subtype, str, schemas.Unset] = schemas.unset,
        documentation_url: typing.Union[MetaOapg.properties.documentation_url, str, schemas.Unset] = schemas.unset,
        github_issue_label: typing.Union[MetaOapg.properties.github_issue_label, str, schemas.Unset] = schemas.unset,
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        release_stage: typing.Union[MetaOapg.properties.release_stage, str, schemas.Unset] = schemas.unset,
        support_level: typing.Union[MetaOapg.properties.support_level, str, schemas.Unset] = schemas.unset,
        connector_spec: typing.Union['ConnectorDefinitionsGetByNameResponseConnectorSpec', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ConnectorDefinitionsGetByNameResponse':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            name=name,
            connector_type=connector_type,
            connector_subtype=connector_subtype,
            documentation_url=documentation_url,
            github_issue_label=github_issue_label,
            icon=icon,
            license=license,
            release_stage=release_stage,
            support_level=support_level,
            connector_spec=connector_spec,
            _configuration=_configuration,
            **kwargs,
        )

from multiwoven_python_sdk.model.connector_definitions_get_by_name_response_connector_spec import ConnectorDefinitionsGetByNameResponseConnectorSpec
from multiwoven_python_sdk.model.connector_definitions_get_by_name_response_tags import ConnectorDefinitionsGetByNameResponseTags
