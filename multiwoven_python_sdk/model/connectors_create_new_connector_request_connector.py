# coding: utf-8

"""
    MultiWoven API

    Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from multiwoven_python_sdk import schemas  # noqa: F401


class ConnectorsCreateNewConnectorRequestConnector(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "configuration",
            "connector_type",
            "name",
            "connector_name",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class connector_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "source": "SOURCE",
                        "destination": "DESTINATION",
                    }
                
                @schemas.classproperty
                def SOURCE(cls):
                    return cls("source")
                
                @schemas.classproperty
                def DESTINATION(cls):
                    return cls("destination")
            connector_name = schemas.StrSchema
        
            @staticmethod
            def configuration() -> typing.Type['ConnectorsCreateNewConnectorRequestConnectorConfiguration']:
                return ConnectorsCreateNewConnectorRequestConnectorConfiguration
            __annotations__ = {
                "name": name,
                "connector_type": connector_type,
                "connector_name": connector_name,
                "configuration": configuration,
            }
    
    configuration: 'ConnectorsCreateNewConnectorRequestConnectorConfiguration'
    connector_type: MetaOapg.properties.connector_type
    name: MetaOapg.properties.name
    connector_name: MetaOapg.properties.connector_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connector_type"]) -> MetaOapg.properties.connector_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connector_name"]) -> MetaOapg.properties.connector_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration"]) -> 'ConnectorsCreateNewConnectorRequestConnectorConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "connector_type", "connector_name", "configuration", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connector_type"]) -> MetaOapg.properties.connector_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connector_name"]) -> MetaOapg.properties.connector_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration"]) -> 'ConnectorsCreateNewConnectorRequestConnectorConfiguration': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "connector_type", "connector_name", "configuration", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        configuration: 'ConnectorsCreateNewConnectorRequestConnectorConfiguration',
        connector_type: typing.Union[MetaOapg.properties.connector_type, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        connector_name: typing.Union[MetaOapg.properties.connector_name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectorsCreateNewConnectorRequestConnector':
        return super().__new__(
            cls,
            *args,
            configuration=configuration,
            connector_type=connector_type,
            name=name,
            connector_name=connector_name,
            _configuration=_configuration,
            **kwargs,
        )

from multiwoven_python_sdk.model.connectors_create_new_connector_request_connector_configuration import ConnectorsCreateNewConnectorRequestConnectorConfiguration
