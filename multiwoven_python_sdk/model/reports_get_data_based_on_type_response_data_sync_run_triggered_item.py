# coding: utf-8

"""
    MultiWoven API

    Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from multiwoven_python_sdk import schemas  # noqa: F401


class ReportsGetDataBasedOnTypeResponseDataSyncRunTriggeredItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            time_slice = schemas.DateTimeSchema
            total_count = schemas.IntSchema
            failed_count = schemas.IntSchema
            success_count = schemas.IntSchema
            __annotations__ = {
                "time_slice": time_slice,
                "total_count": total_count,
                "failed_count": failed_count,
                "success_count": success_count,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_slice"]) -> MetaOapg.properties.time_slice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_count"]) -> MetaOapg.properties.total_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed_count"]) -> MetaOapg.properties.failed_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success_count"]) -> MetaOapg.properties.success_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["time_slice", "total_count", "failed_count", "success_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_slice"]) -> typing.Union[MetaOapg.properties.time_slice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_count"]) -> typing.Union[MetaOapg.properties.total_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed_count"]) -> typing.Union[MetaOapg.properties.failed_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success_count"]) -> typing.Union[MetaOapg.properties.success_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["time_slice", "total_count", "failed_count", "success_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        time_slice: typing.Union[MetaOapg.properties.time_slice, str, datetime, schemas.Unset] = schemas.unset,
        total_count: typing.Union[MetaOapg.properties.total_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        failed_count: typing.Union[MetaOapg.properties.failed_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        success_count: typing.Union[MetaOapg.properties.success_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportsGetDataBasedOnTypeResponseDataSyncRunTriggeredItem':
        return super().__new__(
            cls,
            *args,
            time_slice=time_slice,
            total_count=total_count,
            failed_count=failed_count,
            success_count=success_count,
            _configuration=_configuration,
            **kwargs,
        )
