# coding: utf-8

"""
    MultiWoven API

    Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from multiwoven_python_sdk import schemas  # noqa: F401


class ConnectorDefinitionsGetByNameResponseConnectorSpec(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            documentation_url = schemas.StrSchema
        
            @staticmethod
            def connection_specification() -> typing.Type['ConnectorDefinitionsGetByNameResponseConnectorSpecConnectionSpecification']:
                return ConnectorDefinitionsGetByNameResponseConnectorSpecConnectionSpecification
            supports_normalization = schemas.BoolSchema
            supports_dbt = schemas.BoolSchema
            stream_type = schemas.StrSchema
            __annotations__ = {
                "documentation_url": documentation_url,
                "connection_specification": connection_specification,
                "supports_normalization": supports_normalization,
                "supports_dbt": supports_dbt,
                "stream_type": stream_type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentation_url"]) -> MetaOapg.properties.documentation_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_specification"]) -> 'ConnectorDefinitionsGetByNameResponseConnectorSpecConnectionSpecification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supports_normalization"]) -> MetaOapg.properties.supports_normalization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supports_dbt"]) -> MetaOapg.properties.supports_dbt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_type"]) -> MetaOapg.properties.stream_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["documentation_url", "connection_specification", "supports_normalization", "supports_dbt", "stream_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentation_url"]) -> typing.Union[MetaOapg.properties.documentation_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_specification"]) -> typing.Union['ConnectorDefinitionsGetByNameResponseConnectorSpecConnectionSpecification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supports_normalization"]) -> typing.Union[MetaOapg.properties.supports_normalization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supports_dbt"]) -> typing.Union[MetaOapg.properties.supports_dbt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_type"]) -> typing.Union[MetaOapg.properties.stream_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["documentation_url", "connection_specification", "supports_normalization", "supports_dbt", "stream_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        documentation_url: typing.Union[MetaOapg.properties.documentation_url, str, schemas.Unset] = schemas.unset,
        connection_specification: typing.Union['ConnectorDefinitionsGetByNameResponseConnectorSpecConnectionSpecification', schemas.Unset] = schemas.unset,
        supports_normalization: typing.Union[MetaOapg.properties.supports_normalization, bool, schemas.Unset] = schemas.unset,
        supports_dbt: typing.Union[MetaOapg.properties.supports_dbt, bool, schemas.Unset] = schemas.unset,
        stream_type: typing.Union[MetaOapg.properties.stream_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectorDefinitionsGetByNameResponseConnectorSpec':
        return super().__new__(
            cls,
            *args,
            documentation_url=documentation_url,
            connection_specification=connection_specification,
            supports_normalization=supports_normalization,
            supports_dbt=supports_dbt,
            stream_type=stream_type,
            _configuration=_configuration,
            **kwargs,
        )

from multiwoven_python_sdk.model.connector_definitions_get_by_name_response_connector_spec_connection_specification import ConnectorDefinitionsGetByNameResponseConnectorSpecConnectionSpecification
